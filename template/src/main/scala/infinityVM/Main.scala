package infinityVM

// Student: Oriol Camps PÃ©rez

import cats.*
import cats.data.*
import cats.implicits.given
import scala.annotation.tailrec

// remove comment when implemented to check for tail recursiveness
@tailrec
def run(vm: VMState): VMState = vm.state match
  case ExternalState.Running => run(executeInstruction(vm))
  case ExternalState.Halted => vm // The current VMState is returned unmodified.

  case ExternalState.ReadRequested(mAddress: Int) =>
//    val int_list: List[Int] = scala.io.StdIn.readLine().toList.map((c: Char) => c.toInt) /*SIDE EFFECTS*/

    @tailrec
    def _updatedMem(vm: VMState, mAddress: Int, lData: List[Int]): Vector[Int] = // version of _Store (InfinityVM.scala)
      lData match
        case Nil =>
          if mAddress < vm.memory.length then vm.memory.updated(mAddress, 0)
          else vm.memory.appended(0)

        case (hd: Int) :: tl =>
          if mAddress < vm.memory.length then _updatedMem(
            vm.copy(memory = vm.memory.updated(mAddress, hd)),
            mAddress + 1,
            tl
          )
          else _updatedMem(vm.copy( memory = vm.memory.appended(0) ), mAddress, lData)

    run(executeInstruction(vm.copy(
      memory = _updatedMem(vm, mAddress, scala.io.StdIn.readLine().toList.map((c: Char) => c.toInt) /*SIDE EFFECTS*/),
      state = ExternalState.Running
    )))

  case ExternalState.WriteRequested(mAddress: Int) =>
    @tailrec
    def _readStrFromMem(vm: VMState, startingAddress: Int, acc: List[Char]): String /*List[Char].mkString*/ = vm.memory.get(startingAddress) match
      case None => acc.mkString
      case Some(0) => acc.mkString
      case Some(c: Int) => _readStrFromMem(vm, startingAddress, acc ::: List[Char](c.toChar))

    println(_readStrFromMem(vm, mAddress, List[Char]())) /*SIDE EFFECTS*/
    run(executeInstruction(vm.copy(state = ExternalState.Running)))



/* Example program containing a mini game. Used in the main method below */
val coinGame = Vector(
  3,   1,    0,   0,   4,   1,    25,  0,   3,   2,    0,   0,   4,   2,    0,    0,
  3,   3,    0,   0,   4,   3,    1,   0,   3,   4,    0,   0,   4,   4,    2,    0,
  3,   5,    0,   0,   4,   5,    3,   0,   3,   6,    0,   0,   4,   6,    4,    0,
  3,   7,    0,   0,   4,   7,    10,  0,   3,   8,    0,   0,   4,   8,    0,    0,
  3,   9,    0,   0,   4,   9,    1,   0,   3,   10,   0,   0,   4,   10,   1,    0,
  3,   11,   0,   0,   4,   11,   49,  0,   3,   12,   0,   0,   4,   12,   50,   0,
  3,   13,   0,   0,   4,   13,   51,  0,   3,   14,   0,   0,   4,   14,   1036, 0,
  2,   584,  0,   0,   2,   613,  0,   0,   2,   651,  0,   0,   2,   693,  0,    0,
  2,   729,  0,   0,   2,   771,  0,   0,   2,   812,  0,   0,   1,   1036, 0,    0,
  5,   9,    10,  15,  3,   16,   0,   0,   4,   16,   0,   0,   6,   15,   16,   164,
  7,   584,  0,   0,   5,   1,    2,   17,  3,   18,   0,   0,   4,   18,   0,    0,
  6,   17,   18,  184, 7,   192,  0,   0,   2,   814,  0,   0,   0,   0,    0,    0,
  3,   19,   0,   0,   4,   19,   822, 0,   4,   19,   10,  0,   11,  1,    7,    20,
  4,   20,   48,  0,   12,  20,   19,  0,   4,   19,   1,   0,   10,  1,    7,    20,
  4,   20,   48,  0,   12,  20,   19,  0,   2,   822,  0,   0,   3,   9,    0,    0,
  4,   9,    0,   0,   2,   848,  0,   0,   1,   1036, 0,   0,   8,   8,    14,   0,
  5,   8,    11,  21,  3,   22,   0,   0,   4,   22,   0,   0,   6,   21,   22,   276,
  7,   296,  0,   0,   3,   9,    0,   0,   4,   9,    1,   0,   3,   20,   0,    0,
  4,   20,   -1,  0,   9,   1,    20,  1,   5,   8,    12,  23,  3,   24,   0,    0,
  4,   24,   0,   0,   6,   23,   24,  316, 7,   336,  0,   0,   3,   9,    0,    0,
  4,   9,    1,   0,   3,   20,   0,   0,   4,   20,   -2,  0,   9,   1,    20,   1,
  5,   8,    13,  25,  3,   26,   0,   0,   4,   26,   0,   0,   6,   25,   26,   356,
  7,   376,  0,   0,   3,   9,    0,   0,   4,   9,    1,   0,   3,   20,   0,    0,
  4,   20,   -3,  0,   9,   1,    20,  1,   5,   9,    10,  27,  3,   28,   0,    0,
  4,   28,   -1,  0,   6,   27,   28,  396, 7,   404,  0,   0,   2,   885,  0,    0,
  0,   0,    0,   0,   5,   1,    3,   29,  3,   30,   0,   0,   4,   30,   -1,   0,
  6,   29,   30,  424, 7,   432,  0,   0,   2,   952,  0,   0,   0,   0,    0,    0,
  10,  1,    6,   31,  5,   31,   2,   32,  3,   33,   0,   0,   4,   33,   0,    0,
  6,   32,   33,  456, 7,   472,  0,   0,   2,   986,  0,   0,   3,   20,   0,    0,
  4,   20,   -1,  0,   9,   1,    20,  1,   5,   31,   3,   34,  3,   35,   0,    0,
  4,   35,   0,   0,   6,   34,   35,  492, 7,   508,  0,   0,   2,   986,  0,    0,
  3,   20,   0,   0,   4,   20,   -1,  0,   9,   1,    20,  1,   5,   31,   4,    36,
  3,   37,   0,   0,   4,   37,   0,   0,   6,   36,   37,  528, 7,   544,  0,    0,
  2,   1002, 0,   0,   3,   20,   0,   0,   4,   20,   -2,  0,   9,   1,    20,   1,
  5,   31,   5,   38,  3,   39,   0,   0,   4,   39,   0,   0,   6,   38,   39,   564,
  7,   580,  0,   0,   2,   1019, 0,   0,   3,   20,   0,   0,   4,   20,   -3,   0,
  9,   1,    20,  1,   7,   144,  0,   0,   87,  97,   110, 116, 32,  116,  111,  32,
  112, 108,  97,  121, 32,  97,   32,  108, 105, 116,  116, 108, 101, 32,   103,  97,
  109, 101,  63,  10,  0,   73,   32,  104, 97,  118,  101, 32,  97,  32,   110,  117,
  109, 98,   101, 114, 32,  111,  102, 32,  99,  111,  105, 110, 115, 32,   105,  110,
  32,  109,  121, 32,  104, 97,   110, 100, 46,  10,   0,   69,  97,  99,   104,  32,
  116, 117,  114, 110, 44,  32,   121, 111, 117, 32,   99,  97,  110, 32,   116,  97,
  107, 101,  32,  49,  44,  32,   50,  32,  111, 114,  32,  51,  32,  99,   111,  105,
  110, 115,  46,  10,  0,   84,   104, 101, 110, 32,   73,  32,  115, 104,  97,   108,
  108, 32,   116, 97,  107, 101,  32,  49,  44,  32,   50,  32,  111, 114,  32,   51,
  32,  99,   111, 105, 110, 115,  46,  10,  0,   84,   104, 101, 32,  112,  101,  114,
  115, 111,  110, 32,  119, 104,  111, 32,  116, 97,   107, 101, 115, 32,   116,  104,
  101, 32,   108, 97,  115, 116,  32,  99,  111, 105,  110, 32,  119, 105,  110,  115,
  46,  10,   0,   80,  114, 101,  115, 115, 32,  39,   101, 110, 116, 101,  114,  39,
  32,  105,  102, 32,  121, 111,  117, 32,  97,  114,  101, 32,  114, 101,  97,   100,
  121, 32,   116, 111, 32,  112,  108, 97,  121, 46,   10,  0,   10,  0,    73,   32,
  87,  105,  110, 33,  10,  0,    84,  104, 101, 114,  101, 32,  97,  114,  101,  32,
  120, 120,  32,  99,  111, 105,  110, 115, 32,  108,  101, 102, 116, 46,   10,   0,
  72,  111,  119, 32,  109, 97,   110, 121, 32,  99,   111, 105, 110, 115,  32,   100,
  111, 32,   121, 111, 117, 32,   119, 97,  110, 116,  32,  116, 111, 32,   116,  97,
  107, 101,  58,  32,  0,   73,   110, 118, 97,  108,  105, 100, 32,  73,   110,  112,
  117, 116,  33,  32,  69,  110,  116, 101, 114, 32,   101, 105, 116, 104,  101,  114,
  32,  39,   49,  39,  44,  32,   39,  50,  39,  32,   111, 114, 32,  39,   51,   39,
  32,  97,   110, 100, 32,  116,  104, 101, 110, 32,   112, 114, 101, 115,  115,  32,
  101, 110,  116, 101, 114, 46,   10,  0,   71,  114,  101, 97,  116, 44,   32,   121,
  111, 117,  32,  111, 110, 101,  46,  32,  70,  97,   105, 114, 32,  97,   110,  100,
  32,  115,  113, 117, 97,  114,  101, 46,  10,  0,    73,  32,  116, 97,   107,  101,
  32,  49,   32,  99,  111, 105,  110, 46,  10,  0,    73,  32,  116, 97,   107,  101,
  32,  50,   32,  99,  111, 105,  110, 115, 46,  10,   0,   73,  32,  116,  97,   107,
  101, 32,   51,  32,  99,  111,  105, 110, 115, 46,   10,  0,
)

@main def main(): Unit =
  val start = VMState(
    Map(),
    0,
    coinGame,
    ExternalState.Running
  )
  run(start)
  ()
